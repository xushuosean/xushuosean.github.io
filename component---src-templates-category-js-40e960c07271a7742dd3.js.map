{"version":3,"file":"component---src-templates-category-js-40e960c07271a7742dd3.js","mappings":"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","sources":["webpack://taniarascia.com/./src/components/SEO.js","webpack://taniarascia.com/./src/utils/helpers.js","webpack://taniarascia.com/./src/templates/category.js","webpack://taniarascia.com/./src/components/PageLayout.js","webpack://taniarascia.com/./src/components/Post.js","webpack://taniarascia.com/./src/components/Posts.js"],"sourcesContent":["import React from 'react'\nimport Helmet from 'react-helmet'\n\nimport config from '../utils/config'\n\nexport const SEO = ({ postNode, postPath, postSEO, customDescription }) => {\n  let title\n  let description\n  let image = config.siteLogo\n  let postURL\n\n  if (postSEO) {\n    const postMeta = postNode.frontmatter\n    title = postMeta.title\n    description = postNode.excerpt\n\n    if (postMeta.thumbnail) {\n      image = postMeta.thumbnail.childImageSharp.fixed.src\n    }\n\n    postURL = `${config.siteUrl}${postPath}`\n  } else {\n    title = config.siteTitle\n    description = customDescription || config.description\n  }\n\n  image = `${config.siteUrl}${image}`\n  const schemaOrgJSONLD = [\n    {\n      '@context': 'http://schema.org',\n      '@type': 'WebSite',\n      url: config.siteUrl,\n      name: title,\n      alternateName: title,\n    },\n  ]\n\n  if (postSEO) {\n    schemaOrgJSONLD.push(\n      {\n        '@context': 'http://schema.org',\n        '@type': 'BreadcrumbList',\n        itemListElement: [\n          {\n            '@type': 'ListItem',\n            position: 1,\n            item: {\n              '@id': postURL,\n              name: title,\n              image,\n            },\n          },\n        ],\n      },\n      {\n        '@context': 'http://schema.org',\n        '@type': 'BlogPosting',\n        url: config.siteUrl,\n        name: title,\n        alternateName: title,\n        headline: title,\n        image: {\n          '@type': 'ImageObject',\n          url: image,\n        },\n        description,\n      }\n    )\n  }\n  return (\n    <Helmet>\n      <meta name=\"description\" content={description} />\n      <meta name=\"image\" content={image} />\n\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaOrgJSONLD)}\n      </script>\n\n      <meta property=\"og:url\" content={postSEO ? postURL : config.siteUrl} />\n      {postSEO && <meta property=\"og:type\" content=\"article\" />}\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:image\" content={image} />\n\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={image} />\n    </Helmet>\n  )\n}\n","export function getSimplifiedPosts(posts, options = {}) {\n  return posts.map((post) => ({\n    id: post.node.id,\n    date: post.node.frontmatter.date,\n    slug: post.node.fields.slug,\n    tags: post.node.frontmatter.tags,\n    categories: post.node.frontmatter.categories,\n    title: post.node.frontmatter.title,\n    description: post.node.frontmatter.description,\n    ...(options.thumbnails && {\n      thumbnail: post.node.frontmatter?.thumbnail?.childImageSharp?.fixed,\n    }),\n  }))\n}\n\nexport function getTaxonomyFromPosts(posts, taxonomy) {\n  return posts\n    .reduce((acc, post) => {\n      return [...new Set([...acc, ...(post[taxonomy] || [])])]\n    }, [])\n    .sort()\n}\n\nexport function slugify(string) {\n  return (\n    string &&\n    `${string}`\n      .match(\n        /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g\n      )\n      .map((x) => x.toLowerCase())\n      .join('-')\n  )\n}\n\nexport function capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\nexport function appendComments() {\n  const commentDiv = document.getElementById('append-comments-here')\n  const commentScript = document.createElement('script')\n  const theme = window.localStorage.getItem('theme')\n\n  commentScript.async = true\n  commentScript.src = 'https://utteranc.es/client.js'\n  commentScript.setAttribute('repo', 'taniarascia/comments')\n  commentScript.setAttribute('issue-term', 'pathname')\n  commentScript.setAttribute('id', 'utterances')\n  commentScript.setAttribute(\n    'theme',\n    theme === 'light' ? 'github-light' : 'github-dark'\n  )\n  commentScript.setAttribute('crossorigin', 'anonymous')\n\n  if (!commentDiv.firstChild) {\n    commentDiv.appendChild(commentScript)\n  } else {\n    console.error('Error adding utterances comments')\n  }\n}\n\nexport function getFormattedDate(date, option = 2) {\n  const dateArr = date.split(' ')\n  if (dateArr[1].startsWith('0')) {\n    dateArr[1] = dateArr[1].slice(1, 2)\n  } else {\n    dateArr[1] = dateArr[1].slice(0, 2)\n  }\n\n  if (option === 1) {\n    return dateArr[0] + ' ' + dateArr[option]\n  }\n\n  dateArr[1] += ','\n\n  return dateArr[0] + ' ' + dateArr[option]\n}\n\nexport function isNewPost(date) {\n  const postDate = new Date(date)\n  const today = new Date()\n  const diffTime = Math.abs(today - postDate)\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24))\n\n  if (diffDays < 50) return true\n}\n","import React, { useMemo } from 'react'\nimport { graphql } from 'gatsby'\nimport Helmet from 'react-helmet'\n\nimport { Layout } from '../components/Layout'\nimport { SEO } from '../components/SEO'\nimport { Posts } from '../components/Posts'\nimport { Hero } from '../components/Hero'\nimport { PageLayout } from '../components/PageLayout'\nimport { getSimplifiedPosts } from '../utils/helpers'\nimport config from '../utils/config'\n\nexport default function CategoryTemplate({ data, pageContext }) {\n  let { category } = pageContext\n  const { totalCount } = data.allMarkdownRemark\n  const posts = data.allMarkdownRemark.edges\n  const simplifiedPosts = useMemo(() => getSimplifiedPosts(posts), [posts])\n  const message =\n    totalCount === 1 ? ' post categorized as:' : ' posts categorized as:'\n\n  return (\n    <>\n      <Helmet title={`${category} | ${config.siteTitle}`} />\n      <SEO />\n\n      <PageLayout>\n        <Hero\n          highlight={totalCount}\n          subTitle={message}\n          title={category}\n          type=\"taxonomy\"\n        />\n        <Posts data={simplifiedPosts} showYears />\n      </PageLayout>\n    </>\n  )\n}\n\nCategoryTemplate.Layout = Layout\n\nexport const pageQuery = graphql`\n  query CategoryPage($category: String) {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { frontmatter: { categories: { in: [$category] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            description\n            tags\n            categories\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\n\nexport const PageLayout = ({ children }) => {\n  return <main className=\"main-content page\">{children}</main>\n}\n","import React, { useMemo } from 'react'\nimport { Link } from 'gatsby'\n\nimport { isNewPost, getFormattedDate } from '../utils/helpers'\n\nexport const Post = ({ node, prefix, newspaper }) => {\n  let formattedDate\n\n  if (node.date) {\n    if (!newspaper) {\n      formattedDate = getFormattedDate(node.date, 1)\n    } else {\n      formattedDate = getFormattedDate(node.date)\n    }\n  }\n\n  const newPost = useMemo(() => isNewPost(node.date), [node.date])\n\n  return (\n    <Link\n      to={prefix ? `/${prefix}${node.slug}` : node.slug}\n      key={node.id}\n      className=\"post\"\n    >\n      <p>{node.title}</p>\n      <time className={newPost ? 'new-post' : ''}>{formattedDate}</time>\n    </Link>\n  )\n}\n","import React, { useMemo } from 'react'\n\nimport { Post } from './Post'\n\nexport const Posts = ({\n  data = [],\n  showYears,\n  query,\n  prefix,\n  hideDate,\n  yearOnly,\n  ...props\n}) => {\n  const postsByYear = useMemo(() => {\n    const collection = {}\n\n    data.forEach((post) => {\n      const year = post.date?.split(', ')[1]\n\n      collection[year] = [...(collection[year] || []), post]\n    })\n\n    return collection\n  }, [data])\n  const years = useMemo(() => Object.keys(postsByYear).reverse(), [postsByYear])\n\n  if (showYears) {\n    return years.map((year) => (\n      <section className=\"year\">\n        <h2>{year}</h2>\n        <div className=\"posts\">\n          {postsByYear[year].map((node) => (\n            <Post key={node.id} node={node} query={query} prefix={prefix} />\n          ))}\n        </div>\n      </section>\n    ))\n  } else {\n    return (\n      <div className={props.newspaper ? 'posts newspaper' : 'posts'}>\n        {data.map((node) => (\n          <Post\n            key={node.id}\n            node={node}\n            query={query}\n            prefix={prefix}\n            hideDate={hideDate}\n            yearOnly={yearOnly}\n            {...props}\n          />\n        ))}\n      </div>\n    )\n  }\n}\n"],"names":["SEO","_ref","title","description","postURL","postNode","postPath","postSEO","customDescription","image","config","siteLogo","postMeta","frontmatter","excerpt","thumbnail","childImageSharp","fixed","src","siteUrl","siteTitle","schemaOrgJSONLD","url","name","alternateName","push","itemListElement","position","item","headline","React","Helmet","content","type","JSON","stringify","property","getSimplifiedPosts","posts","options","map","post","_post$node$frontmatte","_post$node$frontmatte2","_post$node$frontmatte3","id","node","date","slug","fields","tags","categories","thumbnails","slugify","string","match","x","toLowerCase","join","getFormattedDate","option","dateArr","split","startsWith","slice","isNewPost","postDate","Date","today","diffTime","Math","abs","floor","CategoryTemplate","data","pageContext","category","totalCount","allMarkdownRemark","edges","simplifiedPosts","useMemo","message","PageLayout","Hero","highlight","subTitle","Posts","showYears","Layout","children","className","Post","formattedDate","prefix","newspaper","newPost","Link","to","key","query","hideDate","yearOnly","props","postsByYear","collection","forEach","_post$date","year","concat","_toConsumableArray","years","Object","keys","reverse","assign"],"sourceRoot":""}