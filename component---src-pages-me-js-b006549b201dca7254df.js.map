{"version":3,"file":"component---src-pages-me-js-b006549b201dca7254df.js","mappings":"yLAKO,MAAMA,EAAMC,IAAyD,IACtEC,EACAC,EAEAC,GAJc,SAAEC,EAAQ,SAAEC,EAAQ,QAAEC,EAAO,kBAAEC,GAAmBP,EAGhEQ,EAAQC,EAAAA,EAAOC,SAGnB,GAAIJ,EAAS,CAEXL,EADiBG,EAASO,YACTV,MACjBC,EAAcE,EAASQ,QAEvBT,EAAU,GAAGM,EAAAA,EAAOI,UAAUR,GAChC,MACEJ,EAAQQ,EAAAA,EAAOK,UACfZ,EAAcK,GAAqBE,EAAAA,EAAOP,YAG5CM,EAAQ,GAAGC,EAAAA,EAAOI,UAAUL,IAC5B,MAAMO,EAAkB,CACtB,CACE,WAAY,oBACZ,QAAS,UACTC,IAAKP,EAAAA,EAAOI,QACZI,KAAMhB,EACNiB,cAAejB,IAoCnB,OAhCIK,GACFS,EAAgBI,KACd,CACE,WAAY,oBACZ,QAAS,iBACTC,gBAAiB,CACf,CACE,QAAS,WACTC,SAAU,EACVC,KAAM,CACJ,MAAOnB,EACPc,KAAMhB,EACNO,YAKR,CACE,WAAY,oBACZ,QAAS,cACTQ,IAAKP,EAAAA,EAAOI,QACZI,KAAMhB,EACNiB,cAAejB,EACfsB,SAAUtB,EACVO,MAAO,CACL,QAAS,cACTQ,IAAKR,GAEPN,gBAKJsB,EAAAA,cAACC,EAAAA,EAAM,KACLD,EAAAA,cAAA,QAAMP,KAAK,cAAcS,QAASxB,IAClCsB,EAAAA,cAAA,QAAMP,KAAK,QAAQS,QAASlB,IAE5BgB,EAAAA,cAAA,UAAQG,KAAK,uBACVC,KAAKC,UAAUd,IAGlBS,EAAAA,cAAA,QAAMM,SAAS,SAASJ,QAASpB,EAAUH,EAAUM,EAAAA,EAAOI,UAC3DP,GAAWkB,EAAAA,cAAA,QAAMM,SAAS,UAAUJ,QAAQ,YAC7CF,EAAAA,cAAA,QAAMM,SAAS,WAAWJ,QAASzB,IACnCuB,EAAAA,cAAA,QAAMM,SAAS,iBAAiBJ,QAASxB,IACzCsB,EAAAA,cAAA,QAAMM,SAAS,WAAWJ,QAASlB,IAEnCgB,EAAAA,cAAA,QAAMP,KAAK,eAAeS,QAAQ,YAClCF,EAAAA,cAAA,QAAMP,KAAK,gBAAgBS,QAASzB,IACpCuB,EAAAA,cAAA,QAAMP,KAAK,sBAAsBS,QAASxB,IAC1CsB,EAAAA,cAAA,QAAMP,KAAK,gBAAgBS,QAASlB,IAC7B,C,qEClFN,MAAMuB,EAAa/B,IAAmB,IAAlB,SAAEgC,GAAUhC,EACrC,OAAOwB,EAAAA,cAAA,QAAMS,UAAU,qBAAqBD,EAAgB,C,8ICK/C,SAASE,IACtB,MAAMjC,EAAQ,WACRC,EACJ,mEACF,OACEsB,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACC,EAAAA,EAAM,CAACxB,MAAO,GAAGA,OAAWQ,EAAAA,EAAOK,cACpCU,EAAAA,cAACzB,EAAAA,EAAG,CAACQ,kBAAmBL,IAExBsB,EAAAA,cAACO,EAAAA,EAAU,KACTP,EAAAA,cAACW,EAAAA,EAAI,CAAClC,MAAOA,EAAOC,YAAaA,IAAe,QAKxD,CAEAgC,EAAGE,OAASA,EAAAA,C","sources":["webpack://taniarascia.com/./src/components/SEO.js","webpack://taniarascia.com/./src/components/PageLayout.js","webpack://taniarascia.com/./src/pages/me.js"],"sourcesContent":["import React from 'react'\nimport Helmet from 'react-helmet'\n\nimport config from '../utils/config'\n\nexport const SEO = ({ postNode, postPath, postSEO, customDescription }) => {\n  let title\n  let description\n  let image = config.siteLogo\n  let postURL\n\n  if (postSEO) {\n    const postMeta = postNode.frontmatter\n    title = postMeta.title\n    description = postNode.excerpt\n\n    postURL = `${config.siteUrl}${postPath}`\n  } else {\n    title = config.siteTitle\n    description = customDescription || config.description\n  }\n\n  image = `${config.siteUrl}${image}`\n  const schemaOrgJSONLD = [\n    {\n      '@context': 'http://schema.org',\n      '@type': 'WebSite',\n      url: config.siteUrl,\n      name: title,\n      alternateName: title,\n    },\n  ]\n\n  if (postSEO) {\n    schemaOrgJSONLD.push(\n      {\n        '@context': 'http://schema.org',\n        '@type': 'BreadcrumbList',\n        itemListElement: [\n          {\n            '@type': 'ListItem',\n            position: 1,\n            item: {\n              '@id': postURL,\n              name: title,\n              image,\n            },\n          },\n        ],\n      },\n      {\n        '@context': 'http://schema.org',\n        '@type': 'BlogPosting',\n        url: config.siteUrl,\n        name: title,\n        alternateName: title,\n        headline: title,\n        image: {\n          '@type': 'ImageObject',\n          url: image,\n        },\n        description,\n      }\n    )\n  }\n  return (\n    <Helmet>\n      <meta name=\"description\" content={description} />\n      <meta name=\"image\" content={image} />\n\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaOrgJSONLD)}\n      </script>\n\n      <meta property=\"og:url\" content={postSEO ? postURL : config.siteUrl} />\n      {postSEO && <meta property=\"og:type\" content=\"article\" />}\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:image\" content={image} />\n\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={image} />\n    </Helmet>\n  )\n}\n","import React from 'react'\n\nexport const PageLayout = ({ children }) => {\n  return <main className=\"main-content page\">{children}</main>\n}\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { Hero } from '../components/Hero'\nimport { Layout } from '../components/Layout'\nimport { PageLayout } from '../components/PageLayout'\nimport { SEO } from '../components/SEO'\nimport config from '../utils/config'\n\nexport default function Me() {\n  const title = 'About Me'\n  const description =\n    'Personal notes about life, music, projects, and everything else.'\n  return (\n    <>\n      <Helmet title={`${title} | ${config.siteTitle}`} />\n      <SEO customDescription={description} />\n\n      <PageLayout>\n        <Hero title={title} description={description} />\n        data\n      </PageLayout>\n    </>\n  )\n}\n\nMe.Layout = Layout"],"names":["SEO","_ref","title","description","postURL","postNode","postPath","postSEO","customDescription","image","config","siteLogo","frontmatter","excerpt","siteUrl","siteTitle","schemaOrgJSONLD","url","name","alternateName","push","itemListElement","position","item","headline","React","Helmet","content","type","JSON","stringify","property","PageLayout","children","className","Me","Hero","Layout"],"sourceRoot":""}