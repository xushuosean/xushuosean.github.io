{"version":3,"file":"component---src-pages-topics-js-e2d535be7f221e88234c.js","mappings":"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","sources":["webpack://taniarascia.com/./src/pages/topics.js","webpack://taniarascia.com/./src/utils/helpers.js","webpack://taniarascia.com/./src/components/PageLayout.js"],"sourcesContent":["import React, { useMemo } from 'react'\nimport { Helmet } from 'react-helmet'\nimport { Link, graphql } from 'gatsby'\nimport config from '../utils/config'\n\nimport { slugify } from '../utils/helpers'\nimport { PageLayout } from '../components/PageLayout'\nimport { Layout } from '../components/Layout'\nimport { Hero } from '../components/Hero'\n\nexport default function Topics({ data }) {\n  const tags = data.tags.group\n  const title = 'Topics'\n  const groupTags = useMemo(\n    () =>\n      tags.reduce((letterMap, tag) => {\n        const letter = tag.name.charAt(0)\n        const newArr = letterMap[letter] ? [...letterMap[letter], tag] : [tag]\n\n        return { ...letterMap, [letter]: newArr }\n      }, {}),\n    [tags]\n  )\n\n  return (\n    <>\n      <Helmet title={`${title} | ${config.siteTitle}`} />\n\n      <PageLayout>\n        <Hero title={title} />\n        {Object.entries(groupTags).map(([key, value]) => {\n          return (\n            <div key={key} className=\"alphabetical-tags\">\n              <h3>{key.toUpperCase()}</h3>\n              <div className=\"tags\">\n                {value.map((tag) => {\n                  return (\n                    <Link\n                      key={tag.name}\n                      to={`/topics/${slugify(tag.name)}`}\n                      className=\"button small\"\n                      activeClassName=\"active\"\n                    >\n                      <span>{tag.name}</span>\n                      <span className=\"tag-count\">{tag.totalCount}</span>\n                    </Link>\n                  )\n                })}\n              </div>\n            </div>\n          )\n        })}\n      </PageLayout>\n    </>\n  )\n}\n\nTopics.Layout = Layout\n\nexport const tagsQuery = graphql`\n  query TopicsQuery {\n    tags: allMarkdownRemark {\n      group(field: frontmatter___tags) {\n        name: fieldValue\n        totalCount\n      }\n    }\n  }\n`\n","export function getSimplifiedPosts(posts, options = {}) {\n  return posts.map((post) => ({\n    id: post.node.id,\n    date: post.node.frontmatter.date,\n    slug: post.node.fields.slug,\n    tags: post.node.frontmatter.tags,\n    categories: post.node.frontmatter.categories,\n    title: post.node.frontmatter.title,\n    description: post.node.frontmatter.description,\n    ...(options.thumbnails && {\n      thumbnail: post.node.frontmatter?.thumbnail?.childImageSharp?.fixed,\n    }),\n  }))\n}\n\nexport function getTaxonomyFromPosts(posts, taxonomy) {\n  return posts\n    .reduce((acc, post) => {\n      return [...new Set([...acc, ...(post[taxonomy] || [])])]\n    }, [])\n    .sort()\n}\n\nexport function slugify(string) {\n  return (\n    string &&\n    `${string}`\n      .match(\n        /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g\n      )\n      .map((x) => x.toLowerCase())\n      .join('-')\n  )\n}\n\nexport function capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\nexport function appendComments() {\n  const commentDiv = document.getElementById('append-comments-here')\n  const commentScript = document.createElement('script')\n  const theme = window.localStorage.getItem('theme')\n\n  commentScript.async = true\n  commentScript.src = 'https://utteranc.es/client.js'\n  commentScript.setAttribute('repo', 'taniarascia/comments')\n  commentScript.setAttribute('issue-term', 'pathname')\n  commentScript.setAttribute('id', 'utterances')\n  commentScript.setAttribute(\n    'theme',\n    theme === 'light' ? 'github-light' : 'github-dark'\n  )\n  commentScript.setAttribute('crossorigin', 'anonymous')\n\n  if (!commentDiv.firstChild) {\n    commentDiv.appendChild(commentScript)\n  } else {\n    console.error('Error adding utterances comments')\n  }\n}\n\nexport function getFormattedDate(date, option = 2) {\n  const dateArr = date.split(' ')\n  if (dateArr[1].startsWith('0')) {\n    dateArr[1] = dateArr[1].slice(1, 2)\n  } else {\n    dateArr[1] = dateArr[1].slice(0, 2)\n  }\n\n  if (option === 1) {\n    return dateArr[0] + ' ' + dateArr[option]\n  }\n\n  dateArr[1] += ','\n\n  return dateArr[0] + ' ' + dateArr[option]\n}\n\nexport function isNewPost(date) {\n  const postDate = new Date(date)\n  const today = new Date()\n  const diffTime = Math.abs(today - postDate)\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24))\n\n  if (diffDays < 50) return true\n}\n","import React from 'react'\n\nexport const PageLayout = ({ children }) => {\n  return <main className=\"main-content page\">{children}</main>\n}\n"],"names":["Topics","_ref","data","tags","group","title","groupTags","useMemo","reduce","letterMap","tag","letter","name","charAt","newArr","concat","_toConsumableArray","React","Helmet","config","siteTitle","PageLayout","Hero","Object","entries","map","_ref2","key","value","className","toUpperCase","Link","to","slugify","activeClassName","totalCount","Layout","getSimplifiedPosts","posts","options","post","_post$node$frontmatte","_post$node$frontmatte2","_post$node$frontmatte3","id","node","date","frontmatter","slug","fields","categories","description","thumbnails","thumbnail","childImageSharp","fixed","string","match","x","toLowerCase","join","getFormattedDate","option","dateArr","split","startsWith","slice","isNewPost","postDate","Date","today","diffTime","Math","abs","floor","children"],"sourceRoot":""}