{"version":3,"file":"component---src-templates-post-js-80dbb30e593aa97b51a3.js","mappings":"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","sources":["webpack://taniarascia.com/./src/components/SEO.js","webpack://taniarascia.com/./src/utils/helpers.js","webpack://taniarascia.com/./src/utils/hooks/useActiveHash.js","webpack://taniarascia.com/./src/components/PostSidebar.js","webpack://taniarascia.com/./src/components/PostLayout.js","webpack://taniarascia.com/./src/templates/post.js"],"sourcesContent":["import React from 'react'\nimport Helmet from 'react-helmet'\n\nimport config from '../utils/config'\n\nexport const SEO = ({ postNode, postPath, postSEO, customDescription }) => {\n  let title\n  let description\n  let image = config.siteLogo\n  let postURL\n\n  if (postSEO) {\n    const postMeta = postNode.frontmatter\n    title = postMeta.title\n    description = postNode.excerpt\n\n    postURL = `${config.siteUrl}${postPath}`\n  } else {\n    title = config.siteTitle\n    description = customDescription || config.description\n  }\n\n  image = `${config.siteUrl}${image}`\n  const schemaOrgJSONLD = [\n    {\n      '@context': 'http://schema.org',\n      '@type': 'WebSite',\n      url: config.siteUrl,\n      name: title,\n      alternateName: title,\n    },\n  ]\n\n  if (postSEO) {\n    schemaOrgJSONLD.push(\n      {\n        '@context': 'http://schema.org',\n        '@type': 'BreadcrumbList',\n        itemListElement: [\n          {\n            '@type': 'ListItem',\n            position: 1,\n            item: {\n              '@id': postURL,\n              name: title,\n              image,\n            },\n          },\n        ],\n      },\n      {\n        '@context': 'http://schema.org',\n        '@type': 'BlogPosting',\n        url: config.siteUrl,\n        name: title,\n        alternateName: title,\n        headline: title,\n        image: {\n          '@type': 'ImageObject',\n          url: image,\n        },\n        description,\n      }\n    )\n  }\n  return (\n    <Helmet>\n      <meta name=\"description\" content={description} />\n      <meta name=\"image\" content={image} />\n\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaOrgJSONLD)}\n      </script>\n\n      <meta property=\"og:url\" content={postSEO ? postURL : config.siteUrl} />\n      {postSEO && <meta property=\"og:type\" content=\"article\" />}\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:image\" content={image} />\n\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={image} />\n    </Helmet>\n  )\n}\n","export function getSimplifiedPosts(posts, options = {}) {\n  return posts.map((post) => ({\n    id: post.node.id,\n    date: post.node.frontmatter.date,\n    slug: post.node.fields.slug,\n    tags: post.node.frontmatter.tags,\n    categories: post.node.frontmatter.categories,\n    title: post.node.frontmatter.title,\n    description: post.node.frontmatter.description,\n  }))\n}\n\nexport function getTaxonomyFromPosts(posts, taxonomy) {\n  return posts\n    .reduce((acc, post) => {\n      return [...new Set([...acc, ...(post[taxonomy] || [])])]\n    }, [])\n    .sort()\n}\n\nexport function slugify(string) {\n  return (\n    string &&\n    `${string}`\n      .match(\n        /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g\n      )\n      .map((x) => x.toLowerCase())\n      .join('-')\n  )\n}\n\nexport function capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\nexport function appendComments() {\n  const commentDiv = document.getElementById('append-comments-here')\n  const commentScript = document.createElement('script')\n  const theme = window.localStorage.getItem('theme')\n\n  commentScript.async = true\n  commentScript.src = 'https://utteranc.es/client.js'\n  commentScript.setAttribute('repo', 'taniarascia/comments')\n  commentScript.setAttribute('issue-term', 'pathname')\n  commentScript.setAttribute('id', 'utterances')\n  commentScript.setAttribute(\n    'theme',\n    theme === 'light' ? 'github-light' : 'github-dark'\n  )\n  commentScript.setAttribute('crossorigin', 'anonymous')\n\n  if (!commentDiv.firstChild) {\n    commentDiv.appendChild(commentScript)\n  } else {\n    console.error('Error adding utterances comments')\n  }\n}\n\nexport function getFormattedDate(date, option = 2) {\n  const dateArr = date.split(' ')\n  if (dateArr[1].startsWith('0')) {\n    dateArr[1] = dateArr[1].slice(1, 2)\n  } else {\n    dateArr[1] = dateArr[1].slice(0, 2)\n  }\n\n  if (option === 1) {\n    return dateArr[0] + ' ' + dateArr[option]\n  }\n\n  dateArr[1] += ','\n\n  return dateArr[0] + ' ' + dateArr[option]\n}\n\nexport function isNewPost(date) {\n  const postDate = new Date(date)\n  const today = new Date()\n  const diffTime = Math.abs(today - postDate)\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24))\n\n  if (diffDays < 50) return true\n}\n","import { useEffect, useState } from 'react'\n\nexport const useActiveHash = (itemIds) => {\n  const [activeHash, setActiveHash] = useState(``)\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            setActiveHash(encodeURI(entry.target.id))\n          }\n        })\n      },\n      { rootMargin: `0% 0% -80% 0%` }\n    )\n\n    const elements = []\n\n    itemIds.forEach((id) => {\n      const cnId = decodeURI(id);\n      if (document.getElementById(cnId))\n        elements.push(document.getElementById(cnId))\n    })\n\n    elements.forEach((element) => {\n      observer.observe(element)\n    })\n\n    return () => {\n      elements.forEach((element) => {\n        observer.unobserve(element)\n      })\n    }\n  }, [itemIds])\n\n  return activeHash\n}\n","import { Link } from 'gatsby'\nimport React, { useEffect, useLayoutEffect, useState } from 'react'\n\nimport { slugify } from '../utils/helpers'\nimport { useActiveHash } from '../utils/hooks/useActiveHash'\n\nexport const PostSidebar = ({ thumbnail, toc, tags = [], date }) => {\n  const [tocLinks, setTocLinks] = useState([])\n\n  useLayoutEffect(() => {\n    const anchors = document.querySelectorAll(`.table-of-contents a`)\n    const ids = []\n    anchors.forEach((a) => {\n      ids.push(a.hash.replace('#', ''))\n    }, [])\n\n    console.log(ids, 'hereids', anchors)\n\n    setTocLinks(ids)\n  }, [toc])\n\n  const activeHash = useActiveHash(tocLinks)\n\n  useEffect(() => {\n    if (activeHash) {\n      const anchors = document.querySelectorAll('.table-of-contents a')\n      anchors.forEach((a) => {\n        a.classList.remove('active')\n      })\n      const activeLink = document.querySelector(\n        `.table-of-contents a[href$=\"${'#' + activeHash}\"]`\n      )\n\n      if (activeLink) {\n        activeLink.classList.add('active')\n      }\n    }\n  }, [activeHash])\n\n  return (\n    <aside className=\"post-sidebar\">\n      <div className=\"post-sidebar-content\">\n\n        <section className=\"post-sidebar-section\">\n          <h2>Published</h2>\n          <div className=\"post-sidebar-offset\">\n            <p>{date}</p>\n            <p>\n              <a href=\"#comments\">View comments</a>\n            </p>\n          </div>\n        </section>\n\n        <section className=\"post-sidebar-section\">\n          <h2>Topics</h2>\n          <div className=\"post-sidebar-offset\">\n            <div className=\"tags\">\n              {tags.map((tag) => {\n                return (\n                  <Link\n                    key={tag}\n                    to={`/topics/${slugify(tag)}`}\n                    className=\"button small\"\n                    activeClassName=\"active\"\n                  >\n                    {tag}\n                  </Link>\n                )\n              })}\n            </div>\n          </div>\n        </section>\n\n        {toc && (\n          <section className=\"post-sidebar-section\">\n            <h2>In This Article</h2>\n            <nav\n              className=\"table-of-contents\"\n              dangerouslySetInnerHTML={{ __html: toc }}\n            />\n          </section>\n        )}\n      </div>\n    </aside>\n  )\n}\n","import React from 'react'\n\nimport { PostSidebar } from './PostSidebar'\n\nexport const PostLayout = ({ post, children }) => {\n  const { tags, date, thumbnail } = post.frontmatter\n\n  return (\n    <>\n      <main className=\"main-content\">{children}</main>\n      <PostSidebar\n        thumbnail={thumbnail}\n        date={date}\n        tags={tags}\n        toc={post.tableOfContents}\n      />\n    </>\n  )\n}\n","import { graphql } from 'gatsby'\nimport React from 'react'\nimport Helmet from 'react-helmet'\n\nimport { Hero } from '../components/Hero'\nimport { Layout } from '../components/Layout'\nimport { PostLayout } from '../components/PostLayout'\nimport { SEO } from '../components/SEO'\nimport config from '../utils/config'\n\nexport default function PostTemplate({ data }) {\n  const post = data.markdownRemark\n  const { title, comments_off, thumbnail } = post.frontmatter\n\n  return (\n    <>\n      <Helmet title={`${post.frontmatter.title} | ${config.siteTitle}`} />\n      <SEO postPath={post.fields.slug} postNode={post} postSEO />\n\n      <PostLayout post={post}>\n        <Hero title={title} type=\"post\" />\n\n        <div\n          className=\"main-article\"\n          id={post.fields.slug}\n          dangerouslySetInnerHTML={{ __html: post.html }}\n        />\n        {!comments_off && (\n          <section id=\"comments\" className=\"comments\">\n            <h3>Comments</h3>\n            {/* <Comments /> */}\n          </section>\n        )}\n      </PostLayout>\n    </>\n  )\n}\n\nPostTemplate.Layout = Layout\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      excerpt\n      tableOfContents\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        tags\n        categories\n        description\n        comments_off\n      }\n    }\n  }\n`\n"],"names":["SEO","_ref","title","description","postURL","postNode","postPath","postSEO","customDescription","image","config","siteLogo","frontmatter","excerpt","siteUrl","siteTitle","schemaOrgJSONLD","url","name","alternateName","push","itemListElement","position","item","headline","React","Helmet","content","type","JSON","stringify","property","getSimplifiedPosts","posts","options","map","post","id","node","date","slug","fields","tags","categories","slugify","string","match","x","toLowerCase","join","getFormattedDate","option","dateArr","split","startsWith","slice","isNewPost","postDate","Date","today","diffTime","Math","abs","floor","PostSidebar","thumbnail","toc","tocLinks","setTocLinks","useState","useLayoutEffect","anchors","document","querySelectorAll","ids","forEach","a","hash","replace","console","log","activeHash","itemIds","setActiveHash","useEffect","observer","IntersectionObserver","entries","entry","isIntersecting","encodeURI","target","rootMargin","elements","cnId","decodeURI","getElementById","element","observe","unobserve","useActiveHash","classList","remove","activeLink","querySelector","add","className","href","tag","Link","key","to","activeClassName","dangerouslySetInnerHTML","__html","PostLayout","children","tableOfContents","PostTemplate","data","markdownRemark","comments_off","Hero","html","Layout"],"sourceRoot":""}